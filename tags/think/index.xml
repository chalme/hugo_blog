<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>think on Chalme</title>
    <link>http://blog.chalme.top/tags/think/</link>
    <description>Recent content in think on Chalme</description>
    <image>
      <title>Chalme</title>
      <url>http://blog.chalme.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://blog.chalme.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 13 Feb 2023 09:04:13 +0800</lastBuildDate><atom:link href="http://blog.chalme.top/tags/think/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DDD</title>
      <link>http://blog.chalme.top/posts/think/ddd/</link>
      <pubDate>Mon, 13 Feb 2023 09:04:13 +0800</pubDate>
      
      <guid>http://blog.chalme.top/posts/think/ddd/</guid>
      <description>领域驱动设计( DDD ) 是一种主要的软件设计方法，侧重于根据领域专家的输入对软件进行建模以匹配该领域。在领域驱动设计下，软件代码的结构和语言（类名、类方法、类变量）要与业务领域相匹配。
领域驱动设计基于以下目标：
将项目的主要重点放在核心领域和领域逻辑上； 基于域模型的复杂设计； 在技 ​​ 术专家和领域专家之间发起创造性协作，以迭代方式完善解决特定领域问题的概念模型。 特点 角色复杂性。 解决软件系统复杂度的一种建模工具。 业务本身复杂，新同学学习和理解成本高。 支撑多业务，多业务的支撑需要平衡共性和差异性的难题，很容易造成相似代码到处拷贝。 模型设计和实现能直接表现业务语义 真正拥抱面向对象的思想 市场上的应用架构 传统 MVC 三层架构 洋葱架构 同心圆代表软件的不同部分，从里向外依次是领域模型，领域服务，应用服务和外层的基础设施和用户终端。
洋葱架构根据依赖原则，定义了各层的依赖关系，越往里依赖程度越低，代码级别越高，越是核心能力。外圆代码依赖只能指向内圆，内圆不需要知道外圆的情况，洋葱架构也是典型的分层架构，和 DDD 分层架构一样，都体现了高内聚，低耦合的设计特性。
CQRS 架构 CQRS 是“命令查询责任分离”（Command Query Responsibility Segregation）的缩写。 在基于 CQRS 的系统中，命令(写操作)和查询(读操作)所使用的数据模型是有区别的。 为什么将查询和命令区隔开呢？ 为什么将查询和命令区隔开呢，是因为在实现各种各样的查询操作时，往往要求非常灵活，多个领域对象的关联查询、分页查询，往往是每个对象取几个字段组成一个视图模型，与领域知识关系没有太紧密的关系。
应用架构 应用架构的意义 定义一套良好的结构； 治理应用复杂度，降低系统熵值； 从随心所欲的混乱状态，走向井井有条的有序状态。 应用架构在不同的地方有不同的理解，不同的业务可能也会有所区别。 能实现目的意义的结构就是一种好的架构。
应用架构有很多模式
COLA &amp;hellip; 一种应用架构模式 我们分了 API、Presentation、Application、Domain、Adapter、Infrastructure 6 大模块。上面箭头方向不是控制流，而是模块依赖方向。由于依赖可以传递，所以 Api 模块也就被传递到 Presentation 依赖，Domain 层也就被传递到 Infrastructure 依赖。
API 主要是对外提供的远程 RPC 接口，包含了接口、参数和返回值的定义。API 模块不依赖任何本项目的其他模块，只依赖基础平台提供的基础公共包 ihr-platform-common（主要是提供返回值 wrapper,领域层的基础领域接口），不依赖其他任何包，保持干净，不为依赖应用引入包版本冲突问题。 查询参数命名以为 Query 结尾，命令参数以 Command 结尾，返回结果以 DTO 结尾。方法返回值需使用 Result 封装。因为是对外提供的 API，所以要有完备的 javadoc 注释。</description>
    </item>
    
    <item>
      <title>项目管理</title>
      <link>http://blog.chalme.top/posts/think/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 10 Feb 2023 21:32:47 +0800</pubDate>
      
      <guid>http://blog.chalme.top/posts/think/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</guid>
      <description>技术关注点无外乎稳定性、成本、体验、合规、效率。 （公司）
一个优秀工程师和一个平庸工程师的最大区别就是，谁有火眼金睛及时识别到问题在哪里，危机在哪里，及时提前准备解决这些危机，而不是在问题发生后，不知所措，两眼一抹黑，自乱阵脚，毫无解决思路。[胡俊锋(崮德)]
稳定性 系统的稳定性是项目很重要的一部分。
身在商品部门，在商品发布这一侧经常会出现发布不可用的或成功率暴跌的情况。
从我个人的角度，谈谈对稳定性整体的理解。 根本上讲，是属于研发规范的范畴。 这边会从三个维度来说明，发生事故前、发生事故时、发生事故后。
发生事故前 这个阶段实际上属于研发规范的范畴，个人理解，如果按照研发规范来开发系统，实际上绝大多数问题都可以避免。
每一个环节实际上细节还挺多的。 当然每一个环节，可以细化如何做，有些是必须要求，有些是可选的，我们可以分级指明。
比如： 设计阶段，比如完整的大需求，在设计方面要求全面，背景、概念图、设计图等都需要完整；面对一些小需求，可以按需选择。
发生事故时 一般来讲，系统有完善的监控，制订相应的标准，我们都可以在第一时间收到响应的异常信息。进而根据一些项目相关信息及预案，来快速恢复系统。
发生事故后 通常需要反思回顾，主要目的是防止事故再次发生，同时也给其他同事提醒。
提供一个模版。
事件概述：（现状描述：谁发现问题影响到什么） 事件影响：影响现状描述 事件范围：影响范围 事件原因：初步原因和结论原因 事件进度：描述进展 事件结果：处理结果 事件方案：如何处理和后续改进 成本 目的： 一方面 可以减少 成本的支出， 另一个方面 增加开发 owner 对项目的了解程度。
一般开发成本有以下部分：
DB： mysql, redis, mq, opensearch , maxcompute， hbash，日志山云 SLS 机器资源： cpu， 内存， 磁盘， 网络带宽 中间件： blink（实时数据处理），精卫， 监控 sunfire（日志收集存储，） 人员成本： 开发/测试/产品/leader 成本控制作为工程师的重要素养之一，大到系统架构、技术选型，小到一个函数方法的执行性能，都会涉及到成本。以前成本强调的不多，可能会时常出现方案设计未考虑成本、申请资源相对随意浪费等情况，如今对大家也都提出了更高的要求。但成本又不是我们面临的唯一因素，如何在支持业务高速发展、保障系统稳定的情况下高效地做这件事，这是一个需要长期修炼的课题，也相信未来大家都会越做越好~
效率 效率不仅仅与工程师素质有紧密联系，与公司制度、文化也有很大关系。
效率可以从各方面来做，简单的
熟练掌握工具使用。比如，开发 IDEA，VI；办公：截图，全局剪贴板；等等 熟练掌握常用 API 的使用。 比如，guava, apache-common; 命令行工具；源码的使用； 熟悉体系结构。 对整体有了解，知道什么在什么地方，有什么作用。 熟悉底层原理。 对于疑难杂症的处理方式。 流程层面：</description>
    </item>
    
    <item>
      <title>离开lazada的随想</title>
      <link>http://blog.chalme.top/posts/think/%E7%A6%BB%E5%BC%80lazada%E7%9A%84%E9%9A%8F%E6%83%B3/</link>
      <pubDate>Thu, 09 Feb 2023 20:08:22 +0800</pubDate>
      
      <guid>http://blog.chalme.top/posts/think/%E7%A6%BB%E5%BC%80lazada%E7%9A%84%E9%9A%8F%E6%83%B3/</guid>
      <description>快离开一家公司了，一些想法想记录一下。
为什么选择这家公司？ 客观说， 当时我想的并不清楚，对社会的了解，对自身能力的评估了解，在和一些朋友的沟通中，薪资压的很低。 简单来讲，想去一个大公司，获得成长。
在这边的收获？ 说实在的， 在工作上是有收获的，但确实感觉收获不大。但是在思想上、思考力上，提升了很多，对未来有一些明确目标。 个人认为，很多时候我们成长是靠自己的，自己有一些想法，去实践，去反思。 在阿里确实有很多牛人，有内部的博客，大家可以在分享自己的想法，总结，实践。
有些东西分享一下。有思考力的人真的很有魅力！
生活与工作的平衡？ 南门 - 慎言平衡。 我认为“平衡”这个提法是不对的。我认为要提“帕累托改进”：例如：在不降低质量和增加时间的前提下，让成本下降；在不降低质量和增加成本的前提下，让时间缩短；在不增加时间和成本的前提下让质量提升。 不过，据我的观察，通常来说，在很多事情上我们都没有达到“帕累托最优”。比如，工作和生活的平衡，绝大多数人都没有达到“帕累托最优”，都是有很多办法可以在不降低生活质量的前提下提升工作成绩、在不降低工作成绩的前提下提升生活质量。或者可以这么说，我认为，在所有的问题上，我们都可以默认的认为我们还远未达到“帕累托最优”。
如何衡量一个研发团队的效率？ 如何衡量一个研发团队的效率。我现在更倾向于觉得，这个问题就好像“怎么衡量一个人的幸福程度”，很难有一个很好的科学量化的度量。 有人说，可不可以用需求来度量：
需求平均周期：一个需求提出到上线的时间 需求吞吐量：一个月或者一年内人均承接需求个数 但是这两个指标和需求大小关系很大，比较难衡量研发效率。需求的大小、复杂度，难量化，难对比。 如果一定要找一个指标，我倒宁可用 code velocity 来衡量一个研发团队的效率。Code velocity 指的是：一个代码变更，从提交入库开始计时，到这段代码被 100%的用户用到，中间经过了多少时间。 Code velocity 这个指标，也参杂了业务因素在里面：1）很多时候，具体的业务形态决定了 code velocity 并不需要很高；2）很多时候，code velocity 的高低有很多非研发团队的因素在里面。但是，code velocity 这个指标的优点是：1）很简单、很容易理解；2）很容易度量，而且普遍适用于各种形态的产品和技术栈；3）code velocity 提高了，大概率是因为研发过程中一些东西有了提高。 Code velocity 和需求大小并没有太大关系。一个巨大的需求，也可以把代码拆细，小块小块代码，细水长流得发布上线。就像“蚂蚁搬家”一样，今天搬个桌子，明天办个锅子。如果可以做到“蚂蚁搬家”，code velocity 就能很快。要做到能够“蚂蚁搬家”，是需要在架构、工具、测试等方面下一番苦功的。 能够做到Push on Green的研发团队，它的效率是很高的，它的 code velocity 也是很高的。
离开原因 公司的变化。 这块之前和部门 leader，也聊了很多。给了我很多建议。第二点，也是部门领导和我聊的原因。 自身的成长。 应该说长期处于一线的开发，各方面也体会的很多，经验也很多。自己也有自己想要做的人。 希望自身可以承担一大块业务，甚至是 leader 的指责。 未来 自身是一个理想化的个体。 思辨、思考能力是非常重要的，这块是继续加强。
待续。。。</description>
    </item>
    
    <item>
      <title>人的通用能力</title>
      <link>http://blog.chalme.top/posts/think/%E4%BA%BA%E7%9A%84%E9%80%9A%E7%94%A8%E8%83%BD%E5%8A%9B/</link>
      <pubDate>Mon, 30 Jan 2023 17:44:21 +0800</pubDate>
      
      <guid>http://blog.chalme.top/posts/think/%E4%BA%BA%E7%9A%84%E9%80%9A%E7%94%A8%E8%83%BD%E5%8A%9B/</guid>
      <description>世界上的人分为两种：一种是“思辨者”，而另一种就是“吃瓜群众”。
这是一个有趣且深刻的问题。作为一个开发者，通常我们都专于研发方面，在整体方面思考的比较少。作为人，我个人认为都需要进行发展。
chatGPT的一种答案 通用能力是指一个人具有的广泛的、综合的能力，包括以下几个方面：
语言能力：能够清晰、流畅地表达思想。 数学能力：对数学知识的理解和运用能力。 逻辑思维能力：能够系统地分析和解决问题。 创造力：具有创造性思维和创新意识。 学习能力：具有自主学习的能力。 社交能力：能够与他人进行有效的沟通和合作。 情绪管理：能够积极面对挑战，并保持良好的情绪状态。 自我调节：具有自我规划和自我调节的能力。 全面发展：关注身体、心理、精神和社会等方面的全面发展。 通用能力是每个人都应该具备的能力，它不仅是一个人的个人发展的重要指标，也是他的社会价值的体现。
个人认知 chatGPT的答案在各个角度都有涉及，是一个比较完美的回答。 通过它的回答，对应到自己，确实在某些方面还是有比较多的不足。
最近在看一本书 《麦肯锡结构化战略思维》，对于个人来讲，结构化战旅思维有了具象的了解，不过，还需多读几次。
文中有一句话记得比较深刻，“焦虑”很大程度上源于对未来的不确定。...我们需要在思维层面突破舒适区的束缚和人脑快速思考的惯性，养成理性思辨的习惯。...
确实我们焦虑主要是来源于对未来的不确定。我们需要养成理性思辨的习惯。</description>
    </item>
    
    <item>
      <title>迁移博客</title>
      <link>http://blog.chalme.top/posts/think/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 27 Jan 2023 01:17:46 +0800</pubDate>
      
      <guid>http://blog.chalme.top/posts/think/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2/</guid>
      <description>前言 博客在大学时代就建立了，主要使用 github page 的能力搭建。刚开始使用 hexo , 虽然具有不错的能力。但总归在构建编译效率比较低，影响心情书写内容及写作效率。
hugo 很早之前就注意到 hugo，这是非常高效的博客工具（其主要使用 go 语言编写）。 最终决定迁移到 hugo。 简单的对比如下：
hexo hugo 社区支持 好 好 编译速度 快 慢 主题 少 多且功能完善 小结 ：在 github star 的维度上看，hugo 已经超越 hexo。 虽然在主题这个维度，很多主题功能都还在在完善； 不可忽视的是用户体验， hugo 的构建编译速度很快，这个是我个人最看重的点。 通过社区的反应来看，未来 hugo 会有更好的发展。
迁移 迁移的过程还是有点痛苦。 一方面，毕竟是一个新的东西，需要熟悉一下。另外，旧的文章也需要迁移到新的模式下，还是有点麻烦的。
在主题使用方面使用的是 PaperMod, 该主题社区使用的比较多的，并且维护积极。
后续 最近在整理过去几年的内容，发现记录了很多各种各样的知识和体会，还是很欣慰的。 不过使用了很多笔记软件（从印象 -&amp;gt; 为知 -&amp;gt; 语雀 -&amp;gt; Fsnotes) ，这块需要大量的时间整理，这个是必须要做的。 后面，也会将一些有价值内容及体会发布到博客上。 主要两个原因：
一方面 写作整理的过程，是一个重新认识体会的重要时刻; 另一个方面，也可以记录成长的过程。 </description>
    </item>
    
  </channel>
</rss>
